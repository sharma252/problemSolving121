//Regular Approach:
bool search(vector<vector<int> > matrix, int n, int m, int key) {
  int low,mid,high;
  for(int i = 0;i < n;i++){
      low = 0;
      high = m-1;
      while(low <= high){
          mid = (low+high)/2;
          if(matrix[i][mid] < key)
              low = mid+1;
          else if(matrix[i][mid] > key)
              high = mid-1;
          else
              return true;
      }
  }
  return false;
}

//Optimised Approach:
bool search(vector<vector<int> > matrix, int n, int m, int key) {
  // code here 
  int low=0,high=n*m;

  while(low<=high){
      int mid = low+(high-low))/2;
      int cur = matrix[mid/m][mid%m];
      if(cur==key){
          return true;
      } else if(cur<key){
          low=mid+1;
      } else{
          high=mid-1;
      }
  }
  return false;
}
