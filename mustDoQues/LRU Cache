/*
Time Complexity: O(N) Approach:
#include <list>
#include <unordered_map>

class LRUCache {
private:
    int capacity;
    std::list<int> lru_list;
    std::unordered_map<int, std::pair<int, std::list<int>::iterator>> cache;

public:
    LRUCache(int capacity) : capacity(capacity) {}
    
    int get(int key) {
        auto it = cache.find(key);
        if (it == cache.end()) return -1;
        lru_list.erase(it->second.second);
        lru_list.push_front(key);
        it->second.second = lru_list.begin();
        return it->second.first;
    }
    
    void put(int key, int value) {
        auto it = cache.find(key);
        if (it != cache.end()) {
            lru_list.erase(it->second.second);
        } else {
            if (cache.size() == capacity) {
                int toRemove = lru_list.back();
                lru_list.pop_back();
                cache.erase(toRemove);
            }
        }
        lru_list.push_front(key);
        cache[key] = {value, lru_list.begin()};
    }
};
*/

//Time Complexity Avg.: O(1)
#include <unordered_map>

class LRUCache {
private:
    struct ListNode {
        int key;
        int value;
        ListNode *next;
        ListNode *prev;
        ListNode(int k, int v) : key(k), value(v), next(nullptr), prev(nullptr) {}
    };
    
    int capacity;
    int size;
    ListNode *head;
    ListNode *tail;
    std::unordered_map<int, ListNode*> cache;
    
    void addToHead(ListNode *node) {
        node->next = head->next;
        node->prev = head;
        head->next->prev = node;
        head->next = node;
    }
    
    void removeNode(ListNode *node) {
        node->prev->next = node->next;
        node->next->prev = node->prev;
    }

public:
    LRUCache(int capacity) : capacity(capacity), size(0), head(new ListNode(-1, -1)), tail(new ListNode(-1, -1)) {
        head->next = tail;
        tail->prev = head;
    }
    
    int get(int key) {
        auto it = cache.find(key);
        if (it == cache.end()) return -1;
        ListNode *node = it->second;
        removeNode(node);
        addToHead(node);
        return node->value;
    }
    
    void put(int key, int value) {
        auto it = cache.find(key);
        if (it != cache.end()) {
            ListNode *node = it->second;
            node->value = value;
            removeNode(node);
            addToHead(node);
        } else {
            ListNode *node = new ListNode(key, value);
            cache[key] = node;
            addToHead(node);
            size++;
            if (size > capacity) {
                ListNode *toRemove = tail->prev;
                removeNode(toRemove);
                cache.erase(toRemove->key);
                size--;
                delete toRemove;
            }
        }
    }
};
