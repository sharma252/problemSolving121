//The Kosaraju Algorithm:
#include<bits/stdc++.h>
using namespace std;
#define F(i,L,R) for (int i = L; i < R; i++)

/*
  We use implementation of graph using hashing.
  Take a closer look.
*/

class graph{
  public:
  unordered_map<int,vector<int>> forGraph;
  unordered_map<int,vector<int>> backGraph;

  //To add edge in forward graph.
  void addEdge(int src,int dest){
    forGraph[src].push_back(dest);
  }

  //To add edge in backward graph.
  void reverseEdge(int src,int dest){
    backGraph[src].push_back(dest);
  }

  //Depth First Traversal of forward graph.
  void DFS_forward(vector <bool> &visited,stack <int> &s1,int cur){
    visited[cur] = true;

      for(auto it : forGraph[cur]){
        if(!visited[it]){
          DFS_forward(visited,s1,it);
        }
    }
    s1.push(cur);
  }

  //Function to find the transpose of the graph.
  void reverseTheGraph(int vertex){
    for(int i=0;i<vertex;i++){
      for(auto it : forGraph[i])
        reverseEdge(it,i);
    }
  }

  //Depth First Traversal for Reversed Graph.
  void DFS_backward(vector <bool> visited,int cur,int &count){
    if(!visited[cur]){
      visited[cur]=true;
      count++;
      for(auto it : backGraph[cur]){
        if(!visited[it])
          DFS_backward(visited,it,count);
      }
    }
  }

  //Return the size of largest component.
  int largestComponent(int vertex){
    vector <bool> visited(vertex,false);
    stack <int> s1;

    for(int i=0;i<vertex;i++){
      if(!visited[i])
        DFS_forward(visited,s1,i);
    }

    reverseTheGraph(vertex);
    int largestComponent=0;
    int count=0;
    
    for(auto it: visited)
      it=false;

    while(!s1.empty()){
      int cur = s1.top();
      s1.pop();
      count=0;
      if(!visited[cur]){
        DFS_backward(visited,cur,count);
        largestComponent = max(largestComponent,count);  
      }
    }

    return largestComponent;
  }

};

/*
  See what we actually do in kosaraju:
    Depth first traversal of the graph.
    Push all elements of graph in a stack.
    Find the transpose of the graph(Reverse the graph).
    Do DFS again and keep a count variable this time to find the size of the largest element.
*/

int main(){
  int vertex,edges;
  cin>>vertex>>edges;

  graph g1;
  for(int i=0;i<edges;i++){
    int s,d;
    cin>>s>>d;
    g1.addEdge(s,d);
  }

  cout<<g1.largestComponent(vertex)<<endl;

  return 0;
}
