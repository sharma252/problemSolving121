//NP hard Problem.
#include<bits/stdc++.h>
using namespace std;

//Brute Force Approch (O(N!) complexity).
int TSP(vector <vector<int>> edges,int n,int src){
  //Vector for number of nodes.
   vector <int> nodes;
   for(int i0;i<n;i++){
      if(!src){
         nodes.push_back(i);
      }
   }

   int shortestPath=-1;
   //Find all the permutation of the node vector and find Minimum Length Path accordingly.
   while(next_permutation(nodes.begin(),nodes.end())){
      int curShort=0;
      int newSrc=src;
      for(int i=0;i<n;i++){
         curShort+=edges[newSrc][nodes[i];
            newSrc=nodes[i];
      }

      shortestPath = min(shortestPath,curShort);

   }
   return shortestPath;
}

int main(){
   int n,e,src;
   cin>>n>>e>>src;

   vector <vector<int>> edges(n,vector<int> (n,0));

   for(int i=0;i<e;i++){
      int s,d,w;
      cin>>s>>d>>w;
      edges[s][d]=w;
   }

   cout<<TSP(edges,n,src)<<endl;

}
