#include<bits/stdc++.h>
using namespace std;
#define F(i,L,R) for (int i = L; i < R; i++)

int minSq(int n){
    if(n<=3)
        return n;

    vector <int> dp(n+1,0);

    for(int i=1;i<=n;i++){
        dp[i] = i;
        for(int j=1;j*j<=i;j++){
            dp[i] = min(dp[i],1 + dp[i-j*j]);
        }
    }
    return dp[n];
}

int minSq(int n,vector <int> dp){
    if(n<=3)
        return n;

    if(dp[n]!=0)
        return dp[n];

    int ans = n;
    for(int i=1;i*i<=n;i++)
        ans = min(ans, 1 + minSq(n-i*i,dp));

    return dp[n] = ans;
}

int minSqRec(int n){
    //n lesser then 3 has no perfect square except one.
    if(n<=3)
        return n;

    //Worse case is no perfect square exist in b/w or we don't get answer by using min perfect Square
    //So square of 1 upto n is default value.
    int ans = n;

    //Now from one to perfect square less then equal to n we check every possiblity to find minimum square upto n.
    for(int i=1;i*i<=n;i++)
        ans = min(ans, 1 + minSq(n-i*i));

    //Finally return min Ans at last.
    return  ans;
}

int main(){
    int n;
    cin>>n;
    
    vector <int> dp(n+1,0);
   
    cout<<minSqRec(n)<<endl;
    cout<<minSq(n,dp)<<endl;
    cout<<minSq(n)<<endl;
  return 0;
}
