#include<bits/stdc++.h>
using namespace std;
#define F(i,L,R) for (int i = L; i < R; i++)

//Recursive Approach:
int OSGame(int arr[],int n){
  if(n<=0)
    return 0;

  //When we pick last element then opponent has a choice to make b/w first and second last. 
  int front = arr[n] + (min(OSGame(arr,n-2),OSGame(arr+1,n-2)));
  //Otherwise if we pick first element then opponent has a choice to make b/w second and last element. 
  int back = arr[0] + (min(OSGame(arr+2,n-2),OSGame(arr+1,n-2)));

  //We return the max result.
  return max(front,back);
}

//DP Approach:
int OSGameDP(int arr[],int n){
  int dp[n][n];

  F(i,0,n)
    dp[i][i] = arr[i];

  F(i,0,n-1){
    dp[i][i+1] = max(arr[i],arr[i+1]);
  }

  for(int len=2;len<n;len++){
    int i=0;
    for(int j=len;j<n;j++,i++){
        int firstElement = arr[i] + min(dp[i+2][len],dp[i+1][len-1]);
        int lastElement = arr[len] + min(dp[i+1][len-1],dp[i][len-2]);
        dp[i][len] = max(firstElement,lastElement);
      }
    }
  return dp[0][n-1];
}

int main(){
  int n;
  cin>>n;

  int arr[n];
  F(i,0,n)
    cin>>arr[i];

  cout<<OSGame(arr,n-1)<<endl;
  cout<<OSGameDP(arr,n)<<endl;

  return 0;
}
