//One of a kindðŸ¤¯
#include<bits/stdc++.h>
using namespace std;
#define F(i,L,R) for (int i = L; i < R; i++)

int matChainMul(int arr[],int n){
    int dp[n][n];

    for(int i=0;i<n;i++){
            dp[i][i]=0;
    }

    int ans;
    for(int i = 2;i<n;i++){                     //Used for chain length 
        for(int j = 1;j<n-i+1;j++){             //Particular postion from where we partioning the array or size of subproblem like M12 or M13: (M1*M2)*M3 etc.
            int rl = i+j-1;		                //Right Limiter
            dp[j][rl] = INT_MAX;                //We will take the min for ans in our dp matrix.
            for(int k = j;k<rl;k++){            // Remaining right side of partitioning.
                ans = dp[j][k] + dp[k+1][rl] + arr[j-1] * arr[k] * arr[rl];
                dp[j][rl] = min(ans,dp[j][rl]);
            }
        }
    }

return dp[1][n-1];

}

int matChainMul(int arr[],int i,int j){
    if(i==j)
        return 0;

    int k, count;
    int mini = INT_MAX;

    for(int k=i;k<j;k++){
        //from start to certain factor of partitioning we taken, and from there to end.
        count = matChainMul(arr,i,k) + matChainMul(arr,k+1,j) + arr[i-1] * arr[k] * arr[j];
        mini = min(mini,count);
    }
    return mini; 
}

int main(){
    int n;
    cin>>n;

    int *arr = new int[n];

    F(i,0,n)
        cin>>arr[i];

    //Pass from second to last as we are calculating i-1 in function.
    cout<<matChainMul(arr,1,n-1)<<endl;

    cout<<matChainMul(arr,n)<<endl;

    return 0;
}
