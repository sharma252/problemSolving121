#include<bits/stdc++.h>
using namespace std;
#define F(i,L,R) for (int i = L; i < R; i++)

/*
    Conditions:
    1. Weight of current element is not allowed to be more then w
    2. Element can be picked up as many as time we want if it is satisfying condition one.
*/

//Recursive Ans:
int unboundedKnapsack(int wArr[],int n,int vArr[],int w){
    if(n==0)
        return 0;

    //If current weight is greater then total weight then skip current element.
    if(wArr[0]>w)
        return unboundedKnapsack(wArr+1,n-1,vArr+1,w);

    //For every case we have two choices either we select current element or skip it.
    return max(vArr[0]+unboundedKnapsack(wArr,n,vArr,w-wArr[0]),unboundedKnapsack(wArr+1,n-1,vArr+1,w));
}

//Dp Ans: 
int unboundedKnapsackDP(int wArr[],int n,int vArr[],int w){
    if(n==0)
        return 0;
    
      vector<vector<int>> mem(w+1,vector<int>(n+1,0));
    //First Method 
  /*
  for(int j=1;j<=n;j++)
    for(int i=1;i<=w;i++)
      if(wt[j-1]<=i)
        mem[i][j] = max(mem[i][j-1],mem[i-wt[j-1]][j] + val[j-1]);
      else
        mem[i][j] = mem[i][j-1];

  return mem[w][n];
  */
    
    //Second Method: Space Optimised
    int dp[w+1];
    F(i,0,w+1)
        dp[i]=0;

    for(int i=0;i<=w;i++){
        for(int j=0;j<n;j++){
            if(wArr[j]<=i)
                dp[i] = max(dp[i],dp[i-wArr[j]] +vArr[j]);
        }
    }
    return dp[w];
}

int main(){
    int n,w;
    cin>>n>>w;

    int wArr[n],vArr[n];

    F(i,0,n)
        cin>>wArr[i];

    F(i,0,n){
        cin>>vArr[i];
    }

    cout<<"Recursive Ans: "<<unboundedKnapsack(wArr,n,vArr,w)<<endl;
    cout<<"DP Ans: "<<unboundedKnapsackDP(wArr,n,vArr,w)<<endl;

    return 0;
}
