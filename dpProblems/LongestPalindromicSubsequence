#include<bits/stdc++.h>
using namespace std;
#define F(i,L,R) for (int i = L; i < R; i++)

int LPSHelper(string s1,int start,int end){
  if(start>end)
    return 0;

  if(start==end)
    return 1;
  
  //If first and last character match we return 2+ LPSHelper.
  //otherwise maximum of LPSHelper(start+1) and (end-1).
  if(s1[start]==s1[end])
    return 2+LPSHelper(s1,start+1,end-1);

  return max(LPSHelper(s1,start+1,end),LPSHelper(s1,start,end-1));

}

int LPS(string s1,int n){
  return LPSHelper(s1,0,n);
}

int LPSDP(string str){
  int n = str.length();
  int dp[n+1][n+1];

  for(int i=0;i<n;i++)
    dp[i][i]=1;

  //See we are not filling the lower traingular matrix as to define palindromic we need to have 
  //starting pointer greater then ending.
  for(int len = 2;len<=n;len++){
    for(int i=0;i<n-len+1;i++){
      int j = i+len-1;
        if(str[i]==str[j] && len!=2)
          dp[i][j] =2+dp[i+1][j-1];
        else if(str[i]==str[j])
          dp[i][j] =2;
        else{
          dp[i][j] = max(dp[i+1][j],dp[i][j-1]);
        }
      }
  }

  return dp[0][n-1];
}

int main(){
  string s1 = "GEEKS FOR GEEKS";

  cout<<LPS(s1,s1.length()-1)<<endl;
  cout<<LPSDP(s1)<<endl;
  return 0;
}
