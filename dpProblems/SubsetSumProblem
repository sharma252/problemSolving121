//Easier after understanding Knapsack.

#include<bits/stdc++.h>
using namespace std;
#define F(i,L,R) for (int i = L; i < R; i++)

//Recursive Solution:
int subsetSumHelper(int arr[],int n,int sum,int rSum){
  if(sum==rSum)
    return true;

  if(n==0 || sum>rSum)
    return 0;

  return (subsetSumHelper(arr,n-1,sum+arr[n],rSum) || subsetSumHelper(arr,n-1,sum,rSum));
}

int subsetSum(int arr[],int n,int rSum){
  int sum=0;
  return (subsetSumHelper(arr,n,sum,rSum));
}

//DP Approach:
bool subsetSumDP(int arr[],int n,int sum){
  int dp[n+1][sum+1];

  for(int i=0;i<=n;i++)
    dp[i][0]=1;

  F(i,1,sum+1)
    dp[0][i]=0;

  for(int i=1;i<=n;i++){
    for(int j=1;j<=sum;j++){
      if(arr[i-1]<=j){
        dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
      }
      else 
        dp[i][j] = dp[i-1][j];
    }
  }
  return dp[n][sum];
}

int main(){
  int n,sum;
  cin>>n>>sum;
  int arr[n];

  F(i,0,n)
    cin>>arr[i];

  cout<<subsetSum(arr,n-1,sum)<<endl;
  cout<<subsetSumDP(arr,n,sum)<<endl;
  return 0;
}
