//A little difficult Question:

#include<bits/stdc++.h>
using namespace std;
#define F(i,L,R) for (int i = L; i < R; i++)

//Memoization Approach:
int catlanNumber(int n,vector <int> &mem){
    if(n==0 || n==1)
        return 1;

    if(mem[n] != 1)
        return mem[n];

    mem[n]=0;
    F(i,0,n)
        mem[n] += catlanNumber(i,mem)*catlanNumber(n-i-1,mem);
    return mem[n];
}

//Dynamic Programming Approach:
int catlanNumber(int n,bool flag){
    int dp[n+1];
    dp[0] = dp[1] = 1;

    for(int i=2;i<=n;i++){
        dp[i] = 0;
        for(int j=0;j<i;j++){
            dp[i] += dp[j] * dp[i-j-1];
        }
    }
    return dp[n];

}

//Recursive Approach:
int catlanNumber(int n){
    //Base case
    if(n==0 || n==1)
        return 1;

    int ans=0;
    //Catlan number upto n is sum of catlan of i and catlan of (n-i-1)
    F(i,0,n)
        ans += catlanNumber(i)*catlanNumber(n-i-1);
    return ans; 
}

int main(){
    int n;
    cin>>n;

    vector <int> mem(n+1,1);

    cout<<"Recursive ans: "<<catlanNumber(n)<<endl;
    cout<<"Memoization ans: "<<catlanNumber(n,mem)<<endl;
    cout<<"Dp ans: "<<catlanNumber(n,true)<<endl;

    return 0;
}
