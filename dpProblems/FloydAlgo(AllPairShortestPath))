#include<bits/stdc++.h>
using namespace std;

void shortestPath(vector<vector<int>> edges){
	int n = edges.size();
	int dp[n][n];
	
	//Intially just copy all the vertices same as original.
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++)
			dp[i][j]=edges[i][j];
	}

	//Consider K as a intermediary node.
	for(int k=0;k<n;k++){
		//Consider i as a starting node.
		for(int i=0;i<n;i++){
			//Consider j as a destination node.
			for(int j=0;j<n;j++){
				//See we only update the path from i to j iff:
				//path from i to k plus k to j is smaller then i to j,
				//And none of the two path is infinite.
				if (dp[i][j] > dp[i][k] + dp[k][j] && dp[i][k]!=INT_MAX && dp[k][j]!=INT_MAX)
					dp[i][j] = min(dp[i][j],dp[i][k] + dp[k][j]);
			}
		}
	}

	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
            if(dp[i][j]!=INT_MAX)
			    cout<<dp[i][j]<<" ";
            else
                cout<<"-1"<<" ";
        }
		cout<<endl;
	}
}


int main(){
	vector<vector<int>> edges;
	vector<int> v1 =   { 0, 5, INT_MAX, 10 };
	edges.push_back(v1);
	v1.clear();
   	v1 = { INT_MAX, 0, 3, INT_MAX };
	edges.push_back(v1);
	v1.clear();
    v1 = { INT_MAX, INT_MAX, 0, 1 };
	edges.push_back(v1);
	v1.clear();
    v1 = { INT_MAX, INT_MAX, INT_MAX, 0 };
	edges.push_back(v1);
	v1.clear();

	shortestPath(edges);

	return 0;
}
