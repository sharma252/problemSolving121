#include <bits/stdc++.h>
using namespace std;

//Iterative approach for heapifying
void heapifyItr(int arr[],int heapSize,int cur){
    //First we check if cur having any child or not
    int lastLeaf = 2*cur+1;

    //We iterative till we don't reach the leaf node.
    while(lastLeaf<heapSize){
        int child;

        //If only left child exists then we have to check only for it.
        if(2*cur+2==heapSize)
            child = lastLeaf;
        //If both child exist check which one is greater and assign that value to child accordingly. 
        else if(arr[lastLeaf]>arr[2*cur+2])
            child = lastLeaf;
        else
            child = 2*cur+2;

        //Check if child is greater then the parent or not.
        if(child!=cur){
            swap(arr[child],arr[cur]);
            cur = child;
        }
        //If it isn't then break out of the loop.
        else
            break;

        //Keep continuing till we reach the leaf node of the heap.
        lastLeaf = 2*cur+1;
    }
}

// Heapify Recursive function that perform the actual heapification.
void heapify(int arr[], int n, int cur){
  // Base condition check if the cur is leaf node or not
  if (cur == n)
    return;

  // Find left && right child respectively using given formula && set largest to cur &&
  // Chech if we need to heapify or not
  int leftChild = 2 * cur + 1;
  int rightChild = 2 * cur + 2;
  int largest = cur;

  // If either of left or right child is greater then the largest that means we need to heapify.
  if (leftChild < n && arr[leftChild] > arr[largest])
    largest = leftChild;
  if (rightChild < n && arr[rightChild] > arr[largest])
    largest = rightChild;

  // We make a check if largest is changed or not
  // If it does heapify it, and recursively call the function to find any abnormality
  // is present in our heap or not.
  if (largest != cur){
    swap(arr[largest], arr[cur]);
    heapify(arr, n, largest);
  }
}

// Building the max heap.
// The oputput from this function do not print heap sort but if you build a perfect binary tree then :
// It surely follows Max heap property.
void heapSort(int arr[], int n){
  //First we build the maxHeap for heap sorting.
  for (int i = (n / 2) - 1; i >= 0; i--)
    heapify(arr, n, i);

  int size = n - 1;

  //Then for every internal node swap the root node with last leaf node 
  //and decrease the size of heap by one every time and then heapify.
  for (int i = n - 1; i > 0; i--){
    swap(arr[i], arr[0]);
    heapify(arr, size--, 0);
  }
}

int main(){
  int n;
  cin >> n;

  int arr[n];

  for (int i = 0; i < n; i++)
    cin >> arr[i];

  HeapSort(arr, n);

  for (int i = 0; i < n; i++)
    cout << arr[i] << " ";

  return 0;
}
